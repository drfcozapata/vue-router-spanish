import{_ as e,c as t,o as a,a3 as o}from"./chunks/framework.BBx4Jw7q.js";const y=JSON.parse('{"title":"API Documentation","description":"","frontmatter":{"editLink":false},"headers":[],"relativePath":"api/index.md","filePath":"api/index.md"}'),r={name:"api/index.md"},i=o(`<p>API Documentation</p><h1 id="API-Documentation" tabindex="-1">API Documentation <a class="header-anchor" href="#API-Documentation" aria-label="Permalink to &quot;API Documentation&quot;">​</a></h1><h2 id="Enumerations" tabindex="-1">Enumerations <a class="header-anchor" href="#Enumerations" aria-label="Permalink to &quot;Enumerations&quot;">​</a></h2><ul><li><a href="./enums/ErrorTypes.html">ErrorTypes</a></li><li><a href="./enums/NavigationFailureType.html">NavigationFailureType</a></li></ul><h2 id="Interfaces" tabindex="-1">Interfaces <a class="header-anchor" href="#Interfaces" aria-label="Permalink to &quot;Interfaces&quot;">​</a></h2><ul><li><a href="./interfaces/HistoryState.html">HistoryState</a></li><li><a href="./interfaces/LocationAsRelativeRaw.html">LocationAsRelativeRaw</a></li><li><a href="./interfaces/MatcherLocation.html">MatcherLocation</a></li><li><a href="./interfaces/MatcherLocationAsPath.html">MatcherLocationAsPath</a></li><li><a href="./interfaces/NavigationFailure.html">NavigationFailure</a></li><li><a href="./interfaces/NavigationGuard.html">NavigationGuard</a></li><li><a href="./interfaces/NavigationGuardNext.html">NavigationGuardNext</a></li><li><a href="./interfaces/NavigationGuardWithThis.html">NavigationGuardWithThis</a></li><li><a href="./interfaces/NavigationHookAfter.html">NavigationHookAfter</a></li><li><a href="./interfaces/NavigationRedirectError.html">NavigationRedirectError</a></li><li><a href="./interfaces/RouteLocationAsPathGeneric.html">RouteLocationAsPathGeneric</a></li><li><a href="./interfaces/RouteLocationAsPathTyped.html">RouteLocationAsPathTyped</a></li><li><a href="./interfaces/RouteLocationAsRelativeGeneric.html">RouteLocationAsRelativeGeneric</a></li><li><a href="./interfaces/RouteLocationAsRelativeTyped.html">RouteLocationAsRelativeTyped</a></li><li><a href="./interfaces/RouteLocationGeneric.html">RouteLocationGeneric</a></li><li><a href="./interfaces/RouteLocationMatched.html">RouteLocationMatched</a></li><li><a href="./interfaces/RouteLocationNamedRaw.html">RouteLocationNamedRaw</a></li><li><a href="./interfaces/RouteLocationNormalizedGeneric.html">RouteLocationNormalizedGeneric</a></li><li><a href="./interfaces/RouteLocationNormalizedLoadedGeneric.html">RouteLocationNormalizedLoadedGeneric</a></li><li><a href="./interfaces/RouteLocationNormalizedLoadedTyped.html">RouteLocationNormalizedLoadedTyped</a></li><li><a href="./interfaces/RouteLocationNormalizedTyped.html">RouteLocationNormalizedTyped</a></li><li><a href="./interfaces/RouteLocationOptions.html">RouteLocationOptions</a></li><li><a href="./interfaces/RouteLocationPathRaw.html">RouteLocationPathRaw</a></li><li><a href="./interfaces/RouteLocationResolvedGeneric.html">RouteLocationResolvedGeneric</a></li><li><a href="./interfaces/RouteLocationResolvedTyped.html">RouteLocationResolvedTyped</a></li><li><a href="./interfaces/RouteLocationTyped.html">RouteLocationTyped</a></li><li><a href="./interfaces/RouteMeta.html">RouteMeta</a></li><li><a href="./interfaces/RouteQueryAndHash.html">RouteQueryAndHash</a></li><li><a href="./interfaces/RouteRecordInfo.html">RouteRecordInfo</a></li><li><a href="./interfaces/RouteRecordMultipleViews.html">RouteRecordMultipleViews</a></li><li><a href="./interfaces/RouteRecordMultipleViewsWithChildren.html">RouteRecordMultipleViewsWithChildren</a></li><li><a href="./interfaces/RouteRecordNormalized.html">RouteRecordNormalized</a></li><li><a href="./interfaces/RouteRecordRedirect.html">RouteRecordRedirect</a></li><li><a href="./interfaces/RouteRecordSingleView.html">RouteRecordSingleView</a></li><li><a href="./interfaces/RouteRecordSingleViewWithChildren.html">RouteRecordSingleViewWithChildren</a></li><li><a href="./interfaces/Router.html">Router</a></li><li><a href="./interfaces/RouterHistory.html">RouterHistory</a></li><li><a href="./interfaces/RouterLinkProps.html">RouterLinkProps</a></li><li><a href="./interfaces/RouterMatcher.html">RouterMatcher</a></li><li><a href="./interfaces/RouterOptions.html">RouterOptions</a></li><li><a href="./interfaces/RouterScrollBehavior.html">RouterScrollBehavior</a></li><li><a href="./interfaces/RouterViewProps.html">RouterViewProps</a></li><li><a href="./interfaces/TypesConfig.html">TypesConfig</a></li><li><a href="./interfaces/UseLinkOptions.html">UseLinkOptions</a></li><li><a href="./interfaces/UseLinkReturn.html">UseLinkReturn</a></li><li><a href="./interfaces/PathParserOptions.html">_PathParserOptions</a></li><li><a href="./interfaces/RouteLocationBase.html">_RouteLocationBase</a></li><li><a href="./interfaces/RouteRecordBase.html">_RouteRecordBase</a></li><li><a href="./interfaces/RouterLinkI.html">_RouterLinkI</a></li></ul><h2 id="Type-Aliases" tabindex="-1">Type Aliases <a class="header-anchor" href="#Type-Aliases" aria-label="Permalink to &quot;Type Aliases&quot;">​</a></h2><h3 id="LocationQuery" tabindex="-1">LocationQuery <a class="header-anchor" href="#LocationQuery" aria-label="Permalink to &quot;LocationQuery&quot;">​</a></h3><p>Ƭ <strong>LocationQuery</strong>: <code>Record</code>&lt;<code>string</code>, <a href="./#LocationQueryValue"><code>LocationQueryValue</code></a> | <a href="./#LocationQueryValue"><code>LocationQueryValue</code></a>[]&gt;</p><p>Normalized query object that appears in <a href="./#RouteLocationNormalized">RouteLocationNormalized</a></p><hr><h3 id="LocationQueryRaw" tabindex="-1">LocationQueryRaw <a class="header-anchor" href="#LocationQueryRaw" aria-label="Permalink to &quot;LocationQueryRaw&quot;">​</a></h3><p>Ƭ <strong>LocationQueryRaw</strong>: <code>Record</code>&lt;<code>string</code> | <code>number</code>, <a href="./#LocationQueryValueRaw"><code>LocationQueryValueRaw</code></a> | <a href="./#LocationQueryValueRaw"><code>LocationQueryValueRaw</code></a>[]&gt;</p><p>Loose <a href="./#LocationQuery">LocationQuery</a> object that can be passed to functions like <a href="./interfaces/Router.html#push">Router.push</a> and <a href="./interfaces/Router.html#replace">Router.replace</a> or anywhere when creating a <a href="./#RouteLocationRaw">RouteLocationRaw</a></p><hr><h3 id="LocationQueryValue" tabindex="-1">LocationQueryValue <a class="header-anchor" href="#LocationQueryValue" aria-label="Permalink to &quot;LocationQueryValue&quot;">​</a></h3><p>Ƭ <strong>LocationQueryValue</strong>: <code>string</code> | <code>null</code></p><p>Possible values in normalized <a href="./#LocationQuery">LocationQuery</a>. <code>null</code> renders the query param but without an <code>=</code>.</p><p><strong><code>Example</code></strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes one-dark-pro github-light vp-code" tabindex="0"><code><span class="line"><span>?isNull&amp;isEmpty=&amp;other=other</span></span>
<span class="line"><span>gives</span></span>
<span class="line"><span>\`{ isNull: null, isEmpty: &#39;&#39;, other: &#39;other&#39; }\`.</span></span></code></pre></div><hr><h3 id="LocationQueryValueRaw" tabindex="-1">LocationQueryValueRaw <a class="header-anchor" href="#LocationQueryValueRaw" aria-label="Permalink to &quot;LocationQueryValueRaw&quot;">​</a></h3><p>Ƭ <strong>LocationQueryValueRaw</strong>: <a href="./#LocationQueryValue"><code>LocationQueryValue</code></a> | <code>number</code> | <code>undefined</code></p><p>Possible values when defining a query.</p><hr><h3 id="NavigationGuardNextCallback" tabindex="-1">NavigationGuardNextCallback <a class="header-anchor" href="#NavigationGuardNextCallback" aria-label="Permalink to &quot;NavigationGuardNextCallback&quot;">​</a></h3><p>Ƭ <strong>NavigationGuardNextCallback</strong>: (<code>vm</code>: <code>ComponentPublicInstance</code>) =&gt; <code>unknown</code></p><p>Callback that can be passed to <code>next()</code> in <code>beforeRouteEnter()</code> guards.</p><h4 id="Type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#Type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h4><p>▸ (<code>vm</code>): <code>unknown</code></p><h5 id="Parameters" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>vm</code></td><td style="text-align:left;"><code>ComponentPublicInstance</code></td></tr></tbody></table><h5 id="Returns" tabindex="-1">Returns <a class="header-anchor" href="#Returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>unknown</code></p><hr><h3 id="NavigationGuardReturn" tabindex="-1">NavigationGuardReturn <a class="header-anchor" href="#NavigationGuardReturn" aria-label="Permalink to &quot;NavigationGuardReturn&quot;">​</a></h3><p>Ƭ <strong>NavigationGuardReturn</strong>: <code>void</code> | <code>Error</code> | <code>boolean</code> | <a href="./#RouteLocationRaw"><code>RouteLocationRaw</code></a></p><p>Return types for a Navigation Guard. Based on <code>TypesConfig</code></p><p><strong><code>See</code></strong></p><p><a href="./interfaces/TypesConfig.html">TypesConfig</a></p><hr><h3 id="ParamValue" tabindex="-1">ParamValue <a class="header-anchor" href="#ParamValue" aria-label="Permalink to &quot;ParamValue&quot;">​</a></h3><p>Ƭ <strong>ParamValue</strong>&lt;<code>isRaw</code>&gt;: <code>true</code> extends <code>isRaw</code> ? <code>string</code> | <code>number</code> : <code>string</code></p><p>Utility type for raw and non raw params like :id</p><h4 id="Type-parameters" tabindex="-1">Type parameters <a class="header-anchor" href="#Type-parameters" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>isRaw</code></td><td style="text-align:left;">extends <code>boolean</code></td></tr></tbody></table><hr><h3 id="ParamValueOneOrMore" tabindex="-1">ParamValueOneOrMore <a class="header-anchor" href="#ParamValueOneOrMore" aria-label="Permalink to &quot;ParamValueOneOrMore&quot;">​</a></h3><p>Ƭ <strong>ParamValueOneOrMore</strong>&lt;<code>isRaw</code>&gt;: [<a href="./#ParamValue"><code>ParamValue</code></a>&lt;<code>isRaw</code>&gt;, ...ParamValue&lt;isRaw&gt;[]]</p><p>Utility type for raw and non raw params like :id+</p><h4 id="Type-parameters-1" tabindex="-1">Type parameters <a class="header-anchor" href="#Type-parameters-1" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>isRaw</code></td><td style="text-align:left;">extends <code>boolean</code></td></tr></tbody></table><hr><h3 id="ParamValueZeroOrMore" tabindex="-1">ParamValueZeroOrMore <a class="header-anchor" href="#ParamValueZeroOrMore" aria-label="Permalink to &quot;ParamValueZeroOrMore&quot;">​</a></h3><p>Ƭ <strong>ParamValueZeroOrMore</strong>&lt;<code>isRaw</code>&gt;: <code>true</code> extends <code>isRaw</code> ? <a href="./#ParamValue"><code>ParamValue</code></a>&lt;<code>isRaw</code>&gt;[] | <code>undefined</code> | <code>null</code> : <a href="./#ParamValue"><code>ParamValue</code></a>&lt;<code>isRaw</code>&gt;[] | <code>undefined</code></p><p>Utility type for raw and non raw params like :id*</p><h4 id="Type-parameters-2" tabindex="-1">Type parameters <a class="header-anchor" href="#Type-parameters-2" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>isRaw</code></td><td style="text-align:left;">extends <code>boolean</code></td></tr></tbody></table><hr><h3 id="ParamValueZeroOrOne" tabindex="-1">ParamValueZeroOrOne <a class="header-anchor" href="#ParamValueZeroOrOne" aria-label="Permalink to &quot;ParamValueZeroOrOne&quot;">​</a></h3><p>Ƭ <strong>ParamValueZeroOrOne</strong>&lt;<code>isRaw</code>&gt;: <code>true</code> extends <code>isRaw</code> ? <code>string</code> | <code>number</code> | <code>null</code> | <code>undefined</code> : <code>string</code></p><p>Utility type for raw and non raw params like :id?</p><h4 id="Type-parameters-3" tabindex="-1">Type parameters <a class="header-anchor" href="#Type-parameters-3" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>isRaw</code></td><td style="text-align:left;">extends <code>boolean</code></td></tr></tbody></table><hr><h3 id="PathParserOptions" tabindex="-1">PathParserOptions <a class="header-anchor" href="#PathParserOptions" aria-label="Permalink to &quot;PathParserOptions&quot;">​</a></h3><p>Ƭ <strong>PathParserOptions</strong>: <code>Pick</code>&lt;<a href="./interfaces/PathParserOptions.html"><code>_PathParserOptions</code></a>, <code>&quot;end&quot;</code> | <code>&quot;sensitive&quot;</code> | <code>&quot;strict&quot;</code>&gt;</p><hr><h3 id="RouteComponent" tabindex="-1">RouteComponent <a class="header-anchor" href="#RouteComponent" aria-label="Permalink to &quot;RouteComponent&quot;">​</a></h3><p>Ƭ <strong>RouteComponent</strong>: <code>Component</code> | <code>DefineComponent</code></p><p>Allowed Component in <a href="./interfaces/RouteLocationMatched.html">RouteLocationMatched</a></p><hr><h3 id="RouteLocation" tabindex="-1">RouteLocation <a class="header-anchor" href="#RouteLocation" aria-label="Permalink to &quot;RouteLocation&quot;">​</a></h3><p>Ƭ <strong>RouteLocation</strong>&lt;<code>Name</code>&gt;: <a href="./#RouteMapGeneric"><code>RouteMapGeneric</code></a> extends <a href="./#RouteMap"><code>RouteMap</code></a> ? <a href="./interfaces/RouteLocationGeneric.html"><code>RouteLocationGeneric</code></a> : <a href="./#RouteLocationTypedList"><code>RouteLocationTypedList</code></a>&lt;<a href="./#RouteMap"><code>RouteMap</code></a>&gt;[<code>Name</code>]</p><p><a href="./#RouteLocationRaw">RouteLocationRaw</a> resolved using the matcher</p><h4 id="Type-parameters-4" tabindex="-1">Type parameters <a class="header-anchor" href="#Type-parameters-4" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Name</code></td><td style="text-align:left;">extends keyof <a href="./#RouteMap"><code>RouteMap</code></a> = keyof <a href="./#RouteMap"><code>RouteMap</code></a></td></tr></tbody></table><hr><h3 id="RouteLocationAsPath" tabindex="-1">RouteLocationAsPath <a class="header-anchor" href="#RouteLocationAsPath" aria-label="Permalink to &quot;RouteLocationAsPath&quot;">​</a></h3><p>Ƭ <strong>RouteLocationAsPath</strong>&lt;<code>Name</code>&gt;: <a href="./#RouteMapGeneric"><code>RouteMapGeneric</code></a> extends <a href="./#RouteMap"><code>RouteMap</code></a> ? <a href="./interfaces/RouteLocationAsPathGeneric.html"><code>RouteLocationAsPathGeneric</code></a> : <a href="./#RouteLocationAsPathTypedList"><code>RouteLocationAsPathTypedList</code></a>&lt;<a href="./#RouteMap"><code>RouteMap</code></a>&gt;[<code>Name</code>]</p><p>Route location as an object with a <code>path</code> property.</p><h4 id="Type-parameters-5" tabindex="-1">Type parameters <a class="header-anchor" href="#Type-parameters-5" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Name</code></td><td style="text-align:left;">extends keyof <a href="./#RouteMap"><code>RouteMap</code></a> = keyof <a href="./#RouteMap"><code>RouteMap</code></a></td></tr></tbody></table><hr><h3 id="RouteLocationAsPathTypedList" tabindex="-1">RouteLocationAsPathTypedList <a class="header-anchor" href="#RouteLocationAsPathTypedList" aria-label="Permalink to &quot;RouteLocationAsPathTypedList&quot;">​</a></h3><p>Ƭ <strong>RouteLocationAsPathTypedList</strong>&lt;<code>RouteMap</code>&gt;: { [N in keyof RouteMap]: RouteLocationAsPathTyped&lt;RouteMap, N&gt; }</p><p>List of all possible <a href="./#RouteLocationAsPath">RouteLocationAsPath</a> indexed by the route name.</p><h4 id="Type-parameters-6" tabindex="-1">Type parameters <a class="header-anchor" href="#Type-parameters-6" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>RouteMap</code></td><td style="text-align:left;">extends <a href="./#RouteMapGeneric"><code>RouteMapGeneric</code></a> = <a href="./#RouteMapGeneric"><code>RouteMapGeneric</code></a></td></tr></tbody></table><hr><h3 id="RouteLocationAsRelative" tabindex="-1">RouteLocationAsRelative <a class="header-anchor" href="#RouteLocationAsRelative" aria-label="Permalink to &quot;RouteLocationAsRelative&quot;">​</a></h3><p>Ƭ <strong>RouteLocationAsRelative</strong>&lt;<code>Name</code>&gt;: <a href="./#RouteMapGeneric"><code>RouteMapGeneric</code></a> extends <a href="./#RouteMap"><code>RouteMap</code></a> ? <a href="./interfaces/RouteLocationAsRelativeGeneric.html"><code>RouteLocationAsRelativeGeneric</code></a> : <a href="./#RouteLocationAsRelativeTypedList"><code>RouteLocationAsRelativeTypedList</code></a>&lt;<a href="./#RouteMap"><code>RouteMap</code></a>&gt;[<code>Name</code>]</p><p>Route location relative to the current location. It accepts other properties than <code>path</code> like <code>params</code>, <code>query</code> and <code>hash</code> to conveniently change them.</p><h4 id="Type-parameters-7" tabindex="-1">Type parameters <a class="header-anchor" href="#Type-parameters-7" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Name</code></td><td style="text-align:left;">extends keyof <a href="./#RouteMap"><code>RouteMap</code></a> = keyof <a href="./#RouteMap"><code>RouteMap</code></a></td></tr></tbody></table><hr><h3 id="RouteLocationAsRelativeTypedList" tabindex="-1">RouteLocationAsRelativeTypedList <a class="header-anchor" href="#RouteLocationAsRelativeTypedList" aria-label="Permalink to &quot;RouteLocationAsRelativeTypedList&quot;">​</a></h3><p>Ƭ <strong>RouteLocationAsRelativeTypedList</strong>&lt;<code>RouteMap</code>&gt;: { [N in keyof RouteMap]: RouteLocationAsRelativeTyped&lt;RouteMap, N&gt; }</p><p>List of all possible <a href="./#RouteLocationAsRelative">RouteLocationAsRelative</a> indexed by the route name.</p><h4 id="Type-parameters-8" tabindex="-1">Type parameters <a class="header-anchor" href="#Type-parameters-8" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>RouteMap</code></td><td style="text-align:left;">extends <a href="./#RouteMapGeneric"><code>RouteMapGeneric</code></a> = <a href="./#RouteMapGeneric"><code>RouteMapGeneric</code></a></td></tr></tbody></table><hr><h3 id="RouteLocationAsString" tabindex="-1">RouteLocationAsString <a class="header-anchor" href="#RouteLocationAsString" aria-label="Permalink to &quot;RouteLocationAsString&quot;">​</a></h3><p>Ƭ <strong>RouteLocationAsString</strong>&lt;<code>Name</code>&gt;: <a href="./#RouteMapGeneric"><code>RouteMapGeneric</code></a> extends <a href="./#RouteMap"><code>RouteMap</code></a> ? <code>string</code> : <code>_LiteralUnion</code>&lt;<a href="./#RouteLocationAsStringTypedList"><code>RouteLocationAsStringTypedList</code></a>&lt;<a href="./#RouteMap"><code>RouteMap</code></a>&gt;[<code>Name</code>], <code>string</code>&gt;</p><p>Same as <a href="./#RouteLocationAsPath">RouteLocationAsPath</a> but as a string literal.</p><h4 id="Type-parameters-9" tabindex="-1">Type parameters <a class="header-anchor" href="#Type-parameters-9" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Name</code></td><td style="text-align:left;">extends keyof <a href="./#RouteMap"><code>RouteMap</code></a> = keyof <a href="./#RouteMap"><code>RouteMap</code></a></td></tr></tbody></table><hr><h3 id="RouteLocationAsStringTyped" tabindex="-1">RouteLocationAsStringTyped <a class="header-anchor" href="#RouteLocationAsStringTyped" aria-label="Permalink to &quot;RouteLocationAsStringTyped&quot;">​</a></h3><p>Ƭ <strong>RouteLocationAsStringTyped</strong>&lt;<code>RouteMap</code>, <code>Name</code>&gt;: <code>RouteMap</code>[<code>Name</code>][<code>&quot;path&quot;</code>]</p><p>Helper to generate a type safe version of the <a href="./#RouteLocationAsString">RouteLocationAsString</a> type.</p><h4 id="Type-parameters-10" tabindex="-1">Type parameters <a class="header-anchor" href="#Type-parameters-10" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>RouteMap</code></td><td style="text-align:left;">extends <a href="./#RouteMapGeneric"><code>RouteMapGeneric</code></a> = <a href="./#RouteMapGeneric"><code>RouteMapGeneric</code></a></td></tr><tr><td style="text-align:left;"><code>Name</code></td><td style="text-align:left;">extends keyof <code>RouteMap</code> = keyof <code>RouteMap</code></td></tr></tbody></table><hr><h3 id="RouteLocationAsStringTypedList" tabindex="-1">RouteLocationAsStringTypedList <a class="header-anchor" href="#RouteLocationAsStringTypedList" aria-label="Permalink to &quot;RouteLocationAsStringTypedList&quot;">​</a></h3><p>Ƭ <strong>RouteLocationAsStringTypedList</strong>&lt;<code>RouteMap</code>&gt;: { [N in keyof RouteMap]: RouteLocationAsStringTyped&lt;RouteMap, N&gt; }</p><p>List of all possible <a href="./#RouteLocationAsString">RouteLocationAsString</a> indexed by the route name.</p><h4 id="Type-parameters-11" tabindex="-1">Type parameters <a class="header-anchor" href="#Type-parameters-11" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>RouteMap</code></td><td style="text-align:left;">extends <a href="./#RouteMapGeneric"><code>RouteMapGeneric</code></a> = <a href="./#RouteMapGeneric"><code>RouteMapGeneric</code></a></td></tr></tbody></table><hr><h3 id="RouteLocationNormalized" tabindex="-1">RouteLocationNormalized <a class="header-anchor" href="#RouteLocationNormalized" aria-label="Permalink to &quot;RouteLocationNormalized&quot;">​</a></h3><p>Ƭ <strong>RouteLocationNormalized</strong>&lt;<code>Name</code>&gt;: <a href="./#RouteMapGeneric"><code>RouteMapGeneric</code></a> extends <a href="./#RouteMap"><code>RouteMap</code></a> ? <a href="./interfaces/RouteLocationNormalizedGeneric.html"><code>RouteLocationNormalizedGeneric</code></a> : <a href="./#RouteLocationNormalizedTypedList"><code>RouteLocationNormalizedTypedList</code></a>&lt;<a href="./#RouteMap"><code>RouteMap</code></a>&gt;[<code>Name</code>]</p><p>Similar to <a href="./#RouteLocation">RouteLocation</a> but its <a href="./interfaces/RouteLocationNormalizedTyped.html#matched"><code>matched</code> property</a> cannot contain redirect records</p><h4 id="Type-parameters-12" tabindex="-1">Type parameters <a class="header-anchor" href="#Type-parameters-12" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Name</code></td><td style="text-align:left;">extends keyof <a href="./#RouteMap"><code>RouteMap</code></a> = keyof <a href="./#RouteMap"><code>RouteMap</code></a></td></tr></tbody></table><hr><h3 id="RouteLocationNormalizedLoaded" tabindex="-1">RouteLocationNormalizedLoaded <a class="header-anchor" href="#RouteLocationNormalizedLoaded" aria-label="Permalink to &quot;RouteLocationNormalizedLoaded&quot;">​</a></h3><p>Ƭ <strong>RouteLocationNormalizedLoaded</strong>&lt;<code>Name</code>&gt;: <a href="./#RouteMapGeneric"><code>RouteMapGeneric</code></a> extends <a href="./#RouteMap"><code>RouteMap</code></a> ? <a href="./interfaces/RouteLocationNormalizedLoadedGeneric.html"><code>RouteLocationNormalizedLoadedGeneric</code></a> : <a href="./#RouteLocationNormalizedLoadedTypedList"><code>RouteLocationNormalizedLoadedTypedList</code></a>&lt;<a href="./#RouteMap"><code>RouteMap</code></a>&gt;[<code>Name</code>]</p><p>Similar to <a href="./#RouteLocationNormalized">RouteLocationNormalized</a> but its <code>components</code> do not contain any function to lazy load components. In other words, it&#39;s ready to be rendered by <code>&lt;RouterView&gt;</code>.</p><h4 id="Type-parameters-13" tabindex="-1">Type parameters <a class="header-anchor" href="#Type-parameters-13" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Name</code></td><td style="text-align:left;">extends keyof <a href="./#RouteMap"><code>RouteMap</code></a> = keyof <a href="./#RouteMap"><code>RouteMap</code></a></td></tr></tbody></table><hr><h3 id="RouteLocationNormalizedLoadedTypedList" tabindex="-1">RouteLocationNormalizedLoadedTypedList <a class="header-anchor" href="#RouteLocationNormalizedLoadedTypedList" aria-label="Permalink to &quot;RouteLocationNormalizedLoadedTypedList&quot;">​</a></h3><p>Ƭ <strong>RouteLocationNormalizedLoadedTypedList</strong>&lt;<code>RouteMap</code>&gt;: { [N in keyof RouteMap]: RouteLocationNormalizedLoadedTyped&lt;RouteMap, N&gt; }</p><p>List of all possible <a href="./#RouteLocationNormalizedLoaded">RouteLocationNormalizedLoaded</a> indexed by the route name.</p><h4 id="Type-parameters-14" tabindex="-1">Type parameters <a class="header-anchor" href="#Type-parameters-14" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>RouteMap</code></td><td style="text-align:left;">extends <a href="./#RouteMapGeneric"><code>RouteMapGeneric</code></a> = <a href="./#RouteMapGeneric"><code>RouteMapGeneric</code></a></td></tr></tbody></table><hr><h3 id="RouteLocationNormalizedTypedList" tabindex="-1">RouteLocationNormalizedTypedList <a class="header-anchor" href="#RouteLocationNormalizedTypedList" aria-label="Permalink to &quot;RouteLocationNormalizedTypedList&quot;">​</a></h3><p>Ƭ <strong>RouteLocationNormalizedTypedList</strong>&lt;<code>RouteMap</code>&gt;: { [N in keyof RouteMap]: RouteLocationNormalizedTyped&lt;RouteMap, N&gt; }</p><p>List of all possible <a href="./#RouteLocationNormalized">RouteLocationNormalized</a> indexed by the route name.</p><h4 id="Type-parameters-15" tabindex="-1">Type parameters <a class="header-anchor" href="#Type-parameters-15" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>RouteMap</code></td><td style="text-align:left;">extends <a href="./#RouteMapGeneric"><code>RouteMapGeneric</code></a> = <a href="./#RouteMapGeneric"><code>RouteMapGeneric</code></a></td></tr></tbody></table><hr><h3 id="RouteLocationRaw" tabindex="-1">RouteLocationRaw <a class="header-anchor" href="#RouteLocationRaw" aria-label="Permalink to &quot;RouteLocationRaw&quot;">​</a></h3><p>Ƭ <strong>RouteLocationRaw</strong>&lt;<code>Name</code>&gt;: <a href="./#RouteMapGeneric"><code>RouteMapGeneric</code></a> extends <a href="./#RouteMap"><code>RouteMap</code></a> ? <a href="./#RouteLocationAsString"><code>RouteLocationAsString</code></a> | <a href="./interfaces/RouteLocationAsRelativeGeneric.html"><code>RouteLocationAsRelativeGeneric</code></a> | <a href="./interfaces/RouteLocationAsPathGeneric.html"><code>RouteLocationAsPathGeneric</code></a> : <code>_LiteralUnion</code>&lt;<a href="./#RouteLocationAsStringTypedList"><code>RouteLocationAsStringTypedList</code></a>&lt;<a href="./#RouteMap"><code>RouteMap</code></a>&gt;[<code>Name</code>], <code>string</code>&gt; | <a href="./#RouteLocationAsRelativeTypedList"><code>RouteLocationAsRelativeTypedList</code></a>&lt;<a href="./#RouteMap"><code>RouteMap</code></a>&gt;[<code>Name</code>] | <a href="./#RouteLocationAsPathTypedList"><code>RouteLocationAsPathTypedList</code></a>&lt;<a href="./#RouteMap"><code>RouteMap</code></a>&gt;[<code>Name</code>]</p><p>Route location that can be passed to <code>router.push()</code> and other user-facing APIs.</p><h4 id="Type-parameters-16" tabindex="-1">Type parameters <a class="header-anchor" href="#Type-parameters-16" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Name</code></td><td style="text-align:left;">extends keyof <a href="./#RouteMap"><code>RouteMap</code></a> = keyof <a href="./#RouteMap"><code>RouteMap</code></a></td></tr></tbody></table><hr><h3 id="RouteLocationResolved" tabindex="-1">RouteLocationResolved <a class="header-anchor" href="#RouteLocationResolved" aria-label="Permalink to &quot;RouteLocationResolved&quot;">​</a></h3><p>Ƭ <strong>RouteLocationResolved</strong>&lt;<code>Name</code>&gt;: <a href="./#RouteMapGeneric"><code>RouteMapGeneric</code></a> extends <a href="./#RouteMap"><code>RouteMap</code></a> ? <a href="./interfaces/RouteLocationResolvedGeneric.html"><code>RouteLocationResolvedGeneric</code></a> : <a href="./#RouteLocationResolvedTypedList"><code>RouteLocationResolvedTypedList</code></a>&lt;<a href="./#RouteMap"><code>RouteMap</code></a>&gt;[<code>Name</code>]</p><p>Route location resolved with <a href="./interfaces/Router.html"><code>router.resolve()</code></a>.</p><h4 id="Type-parameters-17" tabindex="-1">Type parameters <a class="header-anchor" href="#Type-parameters-17" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Name</code></td><td style="text-align:left;">extends keyof <a href="./#RouteMap"><code>RouteMap</code></a> = keyof <a href="./#RouteMap"><code>RouteMap</code></a></td></tr></tbody></table><hr><h3 id="RouteLocationResolvedTypedList" tabindex="-1">RouteLocationResolvedTypedList <a class="header-anchor" href="#RouteLocationResolvedTypedList" aria-label="Permalink to &quot;RouteLocationResolvedTypedList&quot;">​</a></h3><p>Ƭ <strong>RouteLocationResolvedTypedList</strong>&lt;<code>RouteMap</code>&gt;: { [N in keyof RouteMap]: RouteLocationResolvedTyped&lt;RouteMap, N&gt; }</p><p>List of all possible <a href="./#RouteLocationResolved">RouteLocationResolved</a> indexed by the route name.</p><h4 id="Type-parameters-18" tabindex="-1">Type parameters <a class="header-anchor" href="#Type-parameters-18" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>RouteMap</code></td><td style="text-align:left;">extends <a href="./#RouteMapGeneric"><code>RouteMapGeneric</code></a> = <a href="./#RouteMapGeneric"><code>RouteMapGeneric</code></a></td></tr></tbody></table><hr><h3 id="RouteLocationTypedList" tabindex="-1">RouteLocationTypedList <a class="header-anchor" href="#RouteLocationTypedList" aria-label="Permalink to &quot;RouteLocationTypedList&quot;">​</a></h3><p>Ƭ <strong>RouteLocationTypedList</strong>&lt;<code>RouteMap</code>&gt;: { [N in keyof RouteMap]: RouteLocationTyped&lt;RouteMap, N&gt; }</p><p>List of all possible <a href="./#RouteLocation">RouteLocation</a> indexed by the route name.</p><h4 id="Type-parameters-19" tabindex="-1">Type parameters <a class="header-anchor" href="#Type-parameters-19" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>RouteMap</code></td><td style="text-align:left;">extends <a href="./#RouteMapGeneric"><code>RouteMapGeneric</code></a> = <a href="./#RouteMapGeneric"><code>RouteMapGeneric</code></a></td></tr></tbody></table><hr><h3 id="RouteMap" tabindex="-1">RouteMap <a class="header-anchor" href="#RouteMap" aria-label="Permalink to &quot;RouteMap&quot;">​</a></h3><p>Ƭ <strong>RouteMap</strong>: <a href="./interfaces/TypesConfig.html"><code>TypesConfig</code></a> extends <code>Record</code>&lt;<code>&quot;RouteNamedMap&quot;</code>, infer RouteNamedMap&gt; ? <code>RouteNamedMap</code> : <a href="./#RouteMapGeneric"><code>RouteMapGeneric</code></a></p><p>Convenience type to get the typed RouteMap or a generic one if not provided. It is extracted from the <a href="./interfaces/TypesConfig.html">TypesConfig</a> if it exists, it becomes <a href="./#RouteMapGeneric">RouteMapGeneric</a> otherwise.</p><hr><h3 id="RouteMapGeneric" tabindex="-1">RouteMapGeneric <a class="header-anchor" href="#RouteMapGeneric" aria-label="Permalink to &quot;RouteMapGeneric&quot;">​</a></h3><p>Ƭ <strong>RouteMapGeneric</strong>: <code>Record</code>&lt;<code>string</code> | <code>symbol</code>, <a href="./interfaces/RouteRecordInfo.html"><code>RouteRecordInfo</code></a>&gt;</p><p>Generic version of the <code>RouteMap</code>.</p><hr><h3 id="RouteParamValue" tabindex="-1">RouteParamValue <a class="header-anchor" href="#RouteParamValue" aria-label="Permalink to &quot;RouteParamValue&quot;">​</a></h3><p>Ƭ <strong>RouteParamValue</strong>: <code>string</code></p><hr><h3 id="RouteParamValueRaw" tabindex="-1">RouteParamValueRaw <a class="header-anchor" href="#RouteParamValueRaw" aria-label="Permalink to &quot;RouteParamValueRaw&quot;">​</a></h3><p>Ƭ <strong>RouteParamValueRaw</strong>: <a href="./#RouteParamValue"><code>RouteParamValue</code></a> | <code>number</code> | <code>null</code> | <code>undefined</code></p><hr><h3 id="RouteParams" tabindex="-1">RouteParams <a class="header-anchor" href="#RouteParams" aria-label="Permalink to &quot;RouteParams&quot;">​</a></h3><p>Ƭ <strong>RouteParams</strong>&lt;<code>Name</code>&gt;: <a href="./#RouteMap"><code>RouteMap</code></a>[<code>Name</code>][<code>&quot;params&quot;</code>]</p><p>Generate a type safe params for a route location. Requires the name of the route to be passed as a generic.</p><p><strong><code>See</code></strong></p><p><a href="./#RouteParamsGeneric">RouteParamsGeneric</a></p><h4 id="Type-parameters-20" tabindex="-1">Type parameters <a class="header-anchor" href="#Type-parameters-20" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Name</code></td><td style="text-align:left;">extends keyof <a href="./#RouteMap"><code>RouteMap</code></a> = keyof <a href="./#RouteMap"><code>RouteMap</code></a></td></tr></tbody></table><hr><h3 id="RouteParamsGeneric" tabindex="-1">RouteParamsGeneric <a class="header-anchor" href="#RouteParamsGeneric" aria-label="Permalink to &quot;RouteParamsGeneric&quot;">​</a></h3><p>Ƭ <strong>RouteParamsGeneric</strong>: <code>Record</code>&lt;<code>string</code>, <a href="./#RouteParamValue"><code>RouteParamValue</code></a> | <a href="./#RouteParamValue"><code>RouteParamValue</code></a>[]&gt;</p><hr><h3 id="RouteParamsRaw" tabindex="-1">RouteParamsRaw <a class="header-anchor" href="#RouteParamsRaw" aria-label="Permalink to &quot;RouteParamsRaw&quot;">​</a></h3><p>Ƭ <strong>RouteParamsRaw</strong>&lt;<code>Name</code>&gt;: <a href="./#RouteMap"><code>RouteMap</code></a>[<code>Name</code>][<code>&quot;paramsRaw&quot;</code>]</p><p>Generate a type safe raw params for a route location. Requires the name of the route to be passed as a generic.</p><p><strong><code>See</code></strong></p><p><a href="./#RouteParamsRaw">RouteParamsRaw</a></p><h4 id="Type-parameters-21" tabindex="-1">Type parameters <a class="header-anchor" href="#Type-parameters-21" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Name</code></td><td style="text-align:left;">extends keyof <a href="./#RouteMap"><code>RouteMap</code></a> = keyof <a href="./#RouteMap"><code>RouteMap</code></a></td></tr></tbody></table><hr><h3 id="RouteParamsRawGeneric" tabindex="-1">RouteParamsRawGeneric <a class="header-anchor" href="#RouteParamsRawGeneric" aria-label="Permalink to &quot;RouteParamsRawGeneric&quot;">​</a></h3><p>Ƭ <strong>RouteParamsRawGeneric</strong>: <code>Record</code>&lt;<code>string</code>, <a href="./#RouteParamValueRaw"><code>RouteParamValueRaw</code></a> | <code>Exclude</code>&lt;<a href="./#RouteParamValueRaw"><code>RouteParamValueRaw</code></a>, <code>null</code> | <code>undefined</code>&gt;[]&gt;</p><hr><h3 id="RouteRecord" tabindex="-1">RouteRecord <a class="header-anchor" href="#RouteRecord" aria-label="Permalink to &quot;RouteRecord&quot;">​</a></h3><p>Ƭ <strong>RouteRecord</strong>: <a href="./interfaces/RouteRecordNormalized.html"><code>RouteRecordNormalized</code></a></p><p>Normalized version of a <a href="./#RouteRecord">route record</a>.</p><hr><h3 id="RouteRecordName" tabindex="-1">RouteRecordName <a class="header-anchor" href="#RouteRecordName" aria-label="Permalink to &quot;RouteRecordName&quot;">​</a></h3><p>Ƭ <strong>RouteRecordName</strong>: <a href="./#RouteMapGeneric"><code>RouteMapGeneric</code></a> extends <a href="./#RouteMap"><code>RouteMap</code></a> ? <a href="./#RouteRecordNameGeneric"><code>RouteRecordNameGeneric</code></a> : keyof <a href="./#RouteMap"><code>RouteMap</code></a></p><p>Possible values for a route record <strong>after normalization</strong></p><p>NOTE: since <code>RouteRecordName</code> is a type, it evaluates too early and it&#39;s often the generic version <a href="./#RouteRecordNameGeneric">RouteRecordNameGeneric</a>. If you need a typed version of all of the names of routes, use <a href="./#RouteMap"><code>keyof RouteMap</code></a></p><hr><h3 id="RouteRecordNameGeneric" tabindex="-1">RouteRecordNameGeneric <a class="header-anchor" href="#RouteRecordNameGeneric" aria-label="Permalink to &quot;RouteRecordNameGeneric&quot;">​</a></h3><p>Ƭ <strong>RouteRecordNameGeneric</strong>: <code>string</code> | <code>symbol</code> | <code>undefined</code></p><p>Generic version of <a href="./#RouteRecordName">RouteRecordName</a>.</p><hr><h3 id="RouteRecordRaw" tabindex="-1">RouteRecordRaw <a class="header-anchor" href="#RouteRecordRaw" aria-label="Permalink to &quot;RouteRecordRaw&quot;">​</a></h3><p>Ƭ <strong>RouteRecordRaw</strong>: <a href="./interfaces/RouteRecordSingleView.html"><code>RouteRecordSingleView</code></a> | <a href="./interfaces/RouteRecordSingleViewWithChildren.html"><code>RouteRecordSingleViewWithChildren</code></a> | <a href="./interfaces/RouteRecordMultipleViews.html"><code>RouteRecordMultipleViews</code></a> | <a href="./interfaces/RouteRecordMultipleViewsWithChildren.html"><code>RouteRecordMultipleViewsWithChildren</code></a> | <a href="./interfaces/RouteRecordRedirect.html"><code>RouteRecordRedirect</code></a></p><hr><h3 id="RouteRecordRedirectOption" tabindex="-1">RouteRecordRedirectOption <a class="header-anchor" href="#RouteRecordRedirectOption" aria-label="Permalink to &quot;RouteRecordRedirectOption&quot;">​</a></h3><p>Ƭ <strong>RouteRecordRedirectOption</strong>: <a href="./#RouteLocationRaw"><code>RouteLocationRaw</code></a> | (<code>to</code>: <a href="./#RouteLocation"><code>RouteLocation</code></a>) =&gt; <a href="./#RouteLocationRaw"><code>RouteLocationRaw</code></a></p><hr><h3 id="-Awaitable" tabindex="-1">_Awaitable <a class="header-anchor" href="#-Awaitable" aria-label="Permalink to &quot;\\_Awaitable&quot;">​</a></h3><p>Ƭ <strong>_Awaitable</strong>&lt;<code>T</code>&gt;: <code>T</code> | <code>PromiseLike</code>&lt;<code>T</code>&gt;</p><p>Maybe a promise maybe not</p><h4 id="Type-parameters-22" tabindex="-1">Type parameters <a class="header-anchor" href="#Type-parameters-22" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td></tr></tbody></table><hr><h3 id="-RouteRecordProps" tabindex="-1">_RouteRecordProps <a class="header-anchor" href="#-RouteRecordProps" aria-label="Permalink to &quot;\\_RouteRecordProps&quot;">​</a></h3><p>Ƭ <strong>_RouteRecordProps</strong>&lt;<code>Name</code>&gt;: <code>boolean</code> | <code>Record</code>&lt;<code>string</code>, <code>any</code>&gt; | (<code>to</code>: <a href="./#RouteLocationNormalized"><code>RouteLocationNormalized</code></a>&lt;<code>Name</code>&gt;) =&gt; <code>Record</code>&lt;<code>string</code>, <code>any</code>&gt;</p><h4 id="Type-parameters-23" tabindex="-1">Type parameters <a class="header-anchor" href="#Type-parameters-23" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Name</code></td><td style="text-align:left;">extends keyof <a href="./#RouteMap"><code>RouteMap</code></a> = keyof <a href="./#RouteMap"><code>RouteMap</code></a></td></tr></tbody></table><h2 id="Variables" tabindex="-1">Variables <a class="header-anchor" href="#Variables" aria-label="Permalink to &quot;Variables&quot;">​</a></h2><h3 id="RouterLink" tabindex="-1">RouterLink <a class="header-anchor" href="#RouterLink" aria-label="Permalink to &quot;RouterLink&quot;">​</a></h3><p>• <code>Const</code> <strong>RouterLink</strong>: <a href="./interfaces/RouterLinkI.html"><code>_RouterLinkI</code></a></p><p>Component to render a link that triggers a navigation on click.</p><hr><h3 id="RouterView" tabindex="-1">RouterView <a class="header-anchor" href="#RouterView" aria-label="Permalink to &quot;RouterView&quot;">​</a></h3><p>• <code>Const</code> <strong>RouterView</strong>: () =&gt; { <code>$props</code>: <code>AllowedComponentProps</code> &amp; <code>ComponentCustomProps</code> &amp; <code>VNodeProps</code> &amp; <a href="./interfaces/RouterViewProps.html"><code>RouterViewProps</code></a> ; <code>$slots</code>: { <code>default?</code>: (<code>__namedParameters</code>: { <code>Component</code>: <code>VNode</code>&lt;<code>RendererNode</code>, <code>RendererElement</code>, { <code>[key: string]</code>: <code>any</code>; }&gt; ; <code>route</code>: <a href="./interfaces/RouteLocationNormalizedLoadedGeneric.html"><code>RouteLocationNormalizedLoadedGeneric</code></a> }) =&gt; <code>VNode</code>&lt;<code>RendererNode</code>, <code>RendererElement</code>, { <code>[key: string]</code>: <code>any</code>; }&gt;[] } }</p><p>Component to display the current route the user is at.</p><h4 id="Type-declaration-1" tabindex="-1">Type declaration <a class="header-anchor" href="#Type-declaration-1" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h4><p>• <strong>new RouterView</strong>(): <code>Object</code></p><p>Component to display the current route the user is at.</p><h5 id="Returns-1" tabindex="-1">Returns <a class="header-anchor" href="#Returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>Object</code></p><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>$props</code></td><td style="text-align:left;"><code>AllowedComponentProps</code> &amp; <code>ComponentCustomProps</code> &amp; <code>VNodeProps</code> &amp; <a href="./interfaces/RouterViewProps.html"><code>RouterViewProps</code></a></td></tr><tr><td style="text-align:left;"><code>$slots</code></td><td style="text-align:left;">{ <code>default?</code>: (<code>__namedParameters</code>: { <code>Component</code>: <code>VNode</code>&lt;<code>RendererNode</code>, <code>RendererElement</code>, { <code>[key: string]</code>: <code>any</code>; }&gt; ; <code>route</code>: <a href="./interfaces/RouteLocationNormalizedLoadedGeneric.html"><code>RouteLocationNormalizedLoadedGeneric</code></a> }) =&gt; <code>VNode</code>&lt;<code>RendererNode</code>, <code>RendererElement</code>, { <code>[key: string]</code>: <code>any</code>; }&gt;[] }</td></tr><tr><td style="text-align:left;"><code>$slots.default?</code></td><td style="text-align:left;">(<code>__namedParameters</code>: { <code>Component</code>: <code>VNode</code>&lt;<code>RendererNode</code>, <code>RendererElement</code>, { <code>[key: string]</code>: <code>any</code>; }&gt; ; <code>route</code>: <a href="./interfaces/RouteLocationNormalizedLoadedGeneric.html"><code>RouteLocationNormalizedLoadedGeneric</code></a> }) =&gt; <code>VNode</code>&lt;<code>RendererNode</code>, <code>RendererElement</code>, { <code>[key: string]</code>: <code>any</code>; }&gt;[]</td></tr></tbody></table><hr><h3 id="START-LOCATION" tabindex="-1">START_LOCATION <a class="header-anchor" href="#START-LOCATION" aria-label="Permalink to &quot;START\\_LOCATION&quot;">​</a></h3><p>• <code>Const</code> <strong>START_LOCATION</strong>: <a href="./#RouteLocationNormalizedLoaded"><code>RouteLocationNormalizedLoaded</code></a></p><p>Initial route location where the router is. Can be used in navigation guards to differentiate the initial navigation.</p><p><strong><code>Example</code></strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes one-dark-pro github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#D73A49;">import</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;"> { </span><span style="--shiki-dark:#E06C75;--shiki-light:#24292E;">START_LOCATION</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;"> } </span><span style="--shiki-dark:#C678DD;--shiki-light:#D73A49;">from</span><span style="--shiki-dark:#98C379;--shiki-light:#032F62;"> &#39;vue-router&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#24292E;">router</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#6F42C1;">beforeEach</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">((</span><span style="--shiki-dark:#E06C75;--shiki-light:#E36209;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">to</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">, </span><span style="--shiki-dark:#E06C75;--shiki-light:#E36209;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">from</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">) </span><span style="--shiki-dark:#C678DD;--shiki-light:#D73A49;">=&gt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#D73A49;">  if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;"> (</span><span style="--shiki-dark:#E06C75;--shiki-light:#24292E;">from</span><span style="--shiki-dark:#56B6C2;--shiki-light:#D73A49;"> ===</span><span style="--shiki-dark:#E5C07B;--shiki-light:#005CC5;"> START_LOCATION</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">) {</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-light:#6A737D;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">    // initial navigation</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">  }</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">})</span></span></code></pre></div><hr><h3 id="matchedRouteKey" tabindex="-1">matchedRouteKey <a class="header-anchor" href="#matchedRouteKey" aria-label="Permalink to &quot;matchedRouteKey&quot;">​</a></h3><p>• <code>Const</code> <strong>matchedRouteKey</strong>: <code>InjectionKey</code>&lt;<code>ComputedRef</code>&lt;<code>undefined</code> | <a href="./interfaces/RouteRecordNormalized.html"><code>RouteRecordNormalized</code></a>&gt;&gt;</p><p>RouteRecord being rendered by the closest ancestor Router View. Used for <code>onBeforeRouteUpdate</code> and <code>onBeforeRouteLeave</code>. rvlm stands for Router View Location Matched</p><hr><h3 id="routeLocationKey" tabindex="-1">routeLocationKey <a class="header-anchor" href="#routeLocationKey" aria-label="Permalink to &quot;routeLocationKey&quot;">​</a></h3><p>• <code>Const</code> <strong>routeLocationKey</strong>: <code>InjectionKey</code>&lt;<a href="./interfaces/RouteLocationNormalizedLoadedGeneric.html"><code>RouteLocationNormalizedLoadedGeneric</code></a>&gt;</p><p>Allows overriding the current route returned by <code>useRoute</code> in tests. rl stands for route location</p><hr><h3 id="routerKey" tabindex="-1">routerKey <a class="header-anchor" href="#routerKey" aria-label="Permalink to &quot;routerKey&quot;">​</a></h3><p>• <code>Const</code> <strong>routerKey</strong>: <code>InjectionKey</code>&lt;<a href="./interfaces/Router.html"><code>Router</code></a>&gt;</p><p>Allows overriding the router instance returned by <code>useRouter</code> in tests. r stands for router</p><hr><h3 id="routerViewLocationKey" tabindex="-1">routerViewLocationKey <a class="header-anchor" href="#routerViewLocationKey" aria-label="Permalink to &quot;routerViewLocationKey&quot;">​</a></h3><p>• <code>Const</code> <strong>routerViewLocationKey</strong>: <code>InjectionKey</code>&lt;<code>Ref</code>&lt;<a href="./interfaces/RouteLocationNormalizedLoadedGeneric.html"><code>RouteLocationNormalizedLoadedGeneric</code></a>&gt;&gt;</p><p>Allows overriding the current route used by router-view. Internally this is used when the <code>route</code> prop is passed.</p><hr><h3 id="viewDepthKey" tabindex="-1">viewDepthKey <a class="header-anchor" href="#viewDepthKey" aria-label="Permalink to &quot;viewDepthKey&quot;">​</a></h3><p>• <code>Const</code> <strong>viewDepthKey</strong>: <code>InjectionKey</code>&lt;<code>number</code> | <code>Ref</code>&lt;<code>number</code>&gt;&gt;</p><p>Allows overriding the router view depth to control which component in <code>matched</code> is rendered. rvd stands for Router View Depth</p><h2 id="Functions" tabindex="-1">Functions <a class="header-anchor" href="#Functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><h3 id="createMemoryHistory" tabindex="-1">createMemoryHistory <a class="header-anchor" href="#createMemoryHistory" aria-label="Permalink to &quot;createMemoryHistory&quot;">​</a></h3><p>▸ <strong>createMemoryHistory</strong>(<code>base?</code>): <a href="./interfaces/RouterHistory.html"><code>RouterHistory</code></a></p><p>Creates an in-memory based history. The main purpose of this history is to handle SSR. It starts in a special location that is nowhere. It&#39;s up to the user to replace that location with the starter location by either calling <code>router.push</code> or <code>router.replace</code>.</p><h4 id="Parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Default value</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>base</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;"><code>&#39;&#39;</code></td><td style="text-align:left;">Base applied to all urls, defaults to &#39;/&#39;</td></tr></tbody></table><h4 id="Returns-2" tabindex="-1">Returns <a class="header-anchor" href="#Returns-2" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./interfaces/RouterHistory.html"><code>RouterHistory</code></a></p><p>a history object that can be passed to the router constructor</p><hr><h3 id="createRouter" tabindex="-1">createRouter <a class="header-anchor" href="#createRouter" aria-label="Permalink to &quot;createRouter&quot;">​</a></h3><p>▸ <strong>createRouter</strong>(<code>options</code>): <a href="./interfaces/Router.html"><code>Router</code></a></p><p>Creates a Router instance that can be used by a Vue app.</p><h4 id="Parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>options</code></td><td style="text-align:left;"><a href="./interfaces/RouterOptions.html"><code>RouterOptions</code></a></td><td style="text-align:left;"><a href="./interfaces/RouterOptions.html">RouterOptions</a></td></tr></tbody></table><h4 id="Returns-3" tabindex="-1">Returns <a class="header-anchor" href="#Returns-3" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./interfaces/Router.html"><code>Router</code></a></p><hr><h3 id="createRouterMatcher" tabindex="-1">createRouterMatcher <a class="header-anchor" href="#createRouterMatcher" aria-label="Permalink to &quot;createRouterMatcher&quot;">​</a></h3><p>▸ <strong>createRouterMatcher</strong>(<code>routes</code>, <code>globalOptions</code>): <a href="./interfaces/RouterMatcher.html"><code>RouterMatcher</code></a></p><p>Creates a Router Matcher.</p><h4 id="Parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-3" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>routes</code></td><td style="text-align:left;">readonly <a href="./#RouteRecordRaw"><code>RouteRecordRaw</code></a>[]</td><td style="text-align:left;">array of initial routes</td></tr><tr><td style="text-align:left;"><code>globalOptions</code></td><td style="text-align:left;"><a href="./#PathParserOptions"><code>PathParserOptions</code></a></td><td style="text-align:left;">global route options</td></tr></tbody></table><h4 id="Returns-4" tabindex="-1">Returns <a class="header-anchor" href="#Returns-4" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./interfaces/RouterMatcher.html"><code>RouterMatcher</code></a></p><hr><h3 id="createWebHashHistory" tabindex="-1">createWebHashHistory <a class="header-anchor" href="#createWebHashHistory" aria-label="Permalink to &quot;createWebHashHistory&quot;">​</a></h3><p>▸ <strong>createWebHashHistory</strong>(<code>base?</code>): <a href="./interfaces/RouterHistory.html"><code>RouterHistory</code></a></p><p>Creates a hash history. Useful for web applications with no host (e.g. <code>file://</code>) or when configuring a server to handle any URL is not possible.</p><h4 id="Parameters-4" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-4" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>base?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">optional base to provide. Defaults to <code>location.pathname + location.search</code> If there is a <code>&lt;base&gt;</code> tag in the <code>head</code>, its value will be ignored in favor of this parameter <strong>but note it affects all the history.pushState() calls</strong>, meaning that if you use a <code>&lt;base&gt;</code> tag, it&#39;s <code>href</code> value <strong>has to match this parameter</strong> (ignoring anything after the <code>#</code>).</td></tr></tbody></table><h4 id="Returns-5" tabindex="-1">Returns <a class="header-anchor" href="#Returns-5" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./interfaces/RouterHistory.html"><code>RouterHistory</code></a></p><p><strong><code>Example</code></strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes one-dark-pro github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#7F848E;--shiki-light:#6A737D;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">// at https://example.com/folder</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#6F42C1;">createWebHashHistory</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">() </span><span style="--shiki-dark:#7F848E;--shiki-light:#6A737D;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">// gives a url of \`https://example.com/folder#\`</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#6F42C1;">createWebHashHistory</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#032F62;">&#39;/folder/&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">) </span><span style="--shiki-dark:#7F848E;--shiki-light:#6A737D;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">// gives a url of \`https://example.com/folder/#\`</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-light:#6A737D;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">// if the \`#\` is provided in the base, it won&#39;t be added by \`createWebHashHistory\`</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#6F42C1;">createWebHashHistory</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#032F62;">&#39;/folder/#/app/&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">) </span><span style="--shiki-dark:#7F848E;--shiki-light:#6A737D;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">// gives a url of \`https://example.com/folder/#/app/\`</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-light:#6A737D;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">// you should avoid doing this because it changes the original url and breaks copying urls</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#6F42C1;">createWebHashHistory</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#032F62;">&#39;/other-folder/&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">) </span><span style="--shiki-dark:#7F848E;--shiki-light:#6A737D;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">// gives a url of \`https://example.com/other-folder/#\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-light:#6A737D;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">// at file:///usr/etc/folder/index.html</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-light:#6A737D;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">// for locations with no \`host\`, the base is ignored</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#6F42C1;">createWebHashHistory</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#032F62;">&#39;/iAmIgnored&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">) </span><span style="--shiki-dark:#7F848E;--shiki-light:#6A737D;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">// gives a url of \`file:///usr/etc/folder/index.html#\`</span></span></code></pre></div><hr><h3 id="createWebHistory" tabindex="-1">createWebHistory <a class="header-anchor" href="#createWebHistory" aria-label="Permalink to &quot;createWebHistory&quot;">​</a></h3><p>▸ <strong>createWebHistory</strong>(<code>base?</code>): <a href="./interfaces/RouterHistory.html"><code>RouterHistory</code></a></p><p>Creates an HTML5 history. Most common history for single page applications.</p><h4 id="Parameters-5" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-5" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>base?</code></td><td style="text-align:left;"><code>string</code></td></tr></tbody></table><h4 id="Returns-6" tabindex="-1">Returns <a class="header-anchor" href="#Returns-6" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./interfaces/RouterHistory.html"><code>RouterHistory</code></a></p><hr><h3 id="isNavigationFailure" tabindex="-1">isNavigationFailure <a class="header-anchor" href="#isNavigationFailure" aria-label="Permalink to &quot;isNavigationFailure&quot;">​</a></h3><p>▸ <strong>isNavigationFailure</strong>(<code>error</code>, <code>type?</code>): error is NavigationRedirectError</p><p>Check if an object is a <a href="./interfaces/NavigationFailure.html">NavigationFailure</a>.</p><h4 id="Parameters-6" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-6" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>error</code></td><td style="text-align:left;"><code>any</code></td><td style="text-align:left;">possible <a href="./interfaces/NavigationFailure.html">NavigationFailure</a></td></tr><tr><td style="text-align:left;"><code>type?</code></td><td style="text-align:left;"><a href="./enums/ErrorTypes.html#NAVIGATION_GUARD_REDIRECT"><code>NAVIGATION_GUARD_REDIRECT</code></a></td><td style="text-align:left;">optional types to check for</td></tr></tbody></table><h4 id="Returns-7" tabindex="-1">Returns <a class="header-anchor" href="#Returns-7" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p>error is NavigationRedirectError</p><p><strong><code>Example</code></strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes one-dark-pro github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#D73A49;">import</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;"> { </span><span style="--shiki-dark:#E06C75;--shiki-light:#24292E;">isNavigationFailure</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">, </span><span style="--shiki-dark:#E06C75;--shiki-light:#24292E;">NavigationFailureType</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;"> } </span><span style="--shiki-dark:#C678DD;--shiki-light:#D73A49;">from</span><span style="--shiki-dark:#98C379;--shiki-light:#032F62;"> &#39;vue-router&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#24292E;">router</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#6F42C1;">afterEach</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">((</span><span style="--shiki-dark:#E06C75;--shiki-light:#E36209;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">to</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">, </span><span style="--shiki-dark:#E06C75;--shiki-light:#E36209;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">from</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">, </span><span style="--shiki-dark:#E06C75;--shiki-light:#E36209;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">failure</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">) </span><span style="--shiki-dark:#C678DD;--shiki-light:#D73A49;">=&gt;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-light:#6A737D;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">  // Any kind of navigation failure</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#D73A49;">  if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;"> (</span><span style="--shiki-dark:#61AFEF;--shiki-light:#6F42C1;">isNavigationFailure</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#E06C75;--shiki-light:#24292E;">failure</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">)) {</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-light:#6A737D;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">    // ...</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">  }</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-light:#6A737D;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">  // Only duplicated navigations</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#D73A49;">  if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;"> (</span><span style="--shiki-dark:#61AFEF;--shiki-light:#6F42C1;">isNavigationFailure</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#E06C75;--shiki-light:#24292E;">failure</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">, </span><span style="--shiki-dark:#E5C07B;--shiki-light:#24292E;">NavigationFailureType</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">.</span><span style="--shiki-dark:#E06C75;--shiki-light:#24292E;">duplicated</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">)) {</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-light:#6A737D;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">    // ...</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">  }</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-light:#6A737D;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">  // Aborted or canceled navigations</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#D73A49;">  if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;"> (</span><span style="--shiki-dark:#61AFEF;--shiki-light:#6F42C1;">isNavigationFailure</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">(</span><span style="--shiki-dark:#E06C75;--shiki-light:#24292E;">failure</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">, </span><span style="--shiki-dark:#E5C07B;--shiki-light:#24292E;">NavigationFailureType</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">.</span><span style="--shiki-dark:#E06C75;--shiki-light:#24292E;">aborted</span><span style="--shiki-dark:#56B6C2;--shiki-light:#D73A49;"> |</span><span style="--shiki-dark:#E5C07B;--shiki-light:#24292E;"> NavigationFailureType</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">.</span><span style="--shiki-dark:#E06C75;--shiki-light:#24292E;">canceled</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">)) {</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-light:#6A737D;--shiki-dark-font-style:italic;--shiki-light-font-style:inherit;">    // ...</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">  }</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#24292E;">})</span></span></code></pre></div><p>▸ <strong>isNavigationFailure</strong>(<code>error</code>, <code>type?</code>): error is NavigationFailure</p><h4 id="Parameters-7" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-7" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>error</code></td><td style="text-align:left;"><code>any</code></td></tr><tr><td style="text-align:left;"><code>type?</code></td><td style="text-align:left;"><a href="./enums/ErrorTypes.html"><code>ErrorTypes</code></a> | <a href="./enums/NavigationFailureType.html"><code>NavigationFailureType</code></a></td></tr></tbody></table><h4 id="Returns-8" tabindex="-1">Returns <a class="header-anchor" href="#Returns-8" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p>error is NavigationFailure</p><hr><h3 id="loadRouteLocation" tabindex="-1">loadRouteLocation <a class="header-anchor" href="#loadRouteLocation" aria-label="Permalink to &quot;loadRouteLocation&quot;">​</a></h3><p>▸ <strong>loadRouteLocation</strong>(<code>route</code>): <code>Promise</code>&lt;<a href="./#RouteLocationNormalizedLoaded"><code>RouteLocationNormalizedLoaded</code></a>&gt;</p><p>Ensures a route is loaded, so it can be passed as o prop to <code>&lt;RouterView&gt;</code>.</p><h4 id="Parameters-8" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-8" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>route</code></td><td style="text-align:left;"><a href="./interfaces/RouteLocationNormalizedGeneric.html"><code>RouteLocationNormalizedGeneric</code></a> | <a href="./interfaces/RouteLocationGeneric.html"><code>RouteLocationGeneric</code></a></td><td style="text-align:left;">resolved route to load</td></tr></tbody></table><h4 id="Returns-9" tabindex="-1">Returns <a class="header-anchor" href="#Returns-9" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Promise</code>&lt;<a href="./#RouteLocationNormalizedLoaded"><code>RouteLocationNormalizedLoaded</code></a>&gt;</p><hr><h3 id="onBeforeRouteLeave" tabindex="-1">onBeforeRouteLeave <a class="header-anchor" href="#onBeforeRouteLeave" aria-label="Permalink to &quot;onBeforeRouteLeave&quot;">​</a></h3><p>▸ <strong>onBeforeRouteLeave</strong>(<code>leaveGuard</code>): <code>void</code></p><p>Add a navigation guard that triggers whenever the component for the current location is about to be left. Similar to beforeRouteLeave but can be used in any component. The guard is removed when the component is unmounted.</p><h4 id="Parameters-9" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-9" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>leaveGuard</code></td><td style="text-align:left;"><a href="./interfaces/NavigationGuard.html"><code>NavigationGuard</code></a></td><td style="text-align:left;"><a href="./interfaces/NavigationGuard.html">NavigationGuard</a></td></tr></tbody></table><h4 id="Returns-10" tabindex="-1">Returns <a class="header-anchor" href="#Returns-10" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p><hr><h3 id="onBeforeRouteUpdate" tabindex="-1">onBeforeRouteUpdate <a class="header-anchor" href="#onBeforeRouteUpdate" aria-label="Permalink to &quot;onBeforeRouteUpdate&quot;">​</a></h3><p>▸ <strong>onBeforeRouteUpdate</strong>(<code>updateGuard</code>): <code>void</code></p><p>Add a navigation guard that triggers whenever the current location is about to be updated. Similar to beforeRouteUpdate but can be used in any component. The guard is removed when the component is unmounted.</p><h4 id="Parameters-10" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-10" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>updateGuard</code></td><td style="text-align:left;"><a href="./interfaces/NavigationGuard.html"><code>NavigationGuard</code></a></td><td style="text-align:left;"><a href="./interfaces/NavigationGuard.html">NavigationGuard</a></td></tr></tbody></table><h4 id="Returns-11" tabindex="-1">Returns <a class="header-anchor" href="#Returns-11" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>void</code></p><hr><h3 id="parseQuery" tabindex="-1">parseQuery <a class="header-anchor" href="#parseQuery" aria-label="Permalink to &quot;parseQuery&quot;">​</a></h3><p>▸ <strong>parseQuery</strong>(<code>search</code>): <a href="./#LocationQuery"><code>LocationQuery</code></a></p><p>Transforms a queryString into a <a href="./#LocationQuery">LocationQuery</a> object. Accept both, a version with the leading <code>?</code> and without Should work as URLSearchParams</p><h4 id="Parameters-11" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-11" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>search</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">search string to parse</td></tr></tbody></table><h4 id="Returns-12" tabindex="-1">Returns <a class="header-anchor" href="#Returns-12" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./#LocationQuery"><code>LocationQuery</code></a></p><p>a query object</p><hr><h3 id="stringifyQuery" tabindex="-1">stringifyQuery <a class="header-anchor" href="#stringifyQuery" aria-label="Permalink to &quot;stringifyQuery&quot;">​</a></h3><p>▸ <strong>stringifyQuery</strong>(<code>query</code>): <code>string</code></p><p>Stringifies a <a href="./#LocationQueryRaw">LocationQueryRaw</a> object. Like <code>URLSearchParams</code>, it doesn&#39;t prepend a <code>?</code></p><h4 id="Parameters-12" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-12" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>query</code></td><td style="text-align:left;"><a href="./#LocationQueryRaw"><code>LocationQueryRaw</code></a></td><td style="text-align:left;">query object to stringify</td></tr></tbody></table><h4 id="Returns-13" tabindex="-1">Returns <a class="header-anchor" href="#Returns-13" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>string</code></p><p>string version of the query without the leading <code>?</code></p><hr><h3 id="useLink" tabindex="-1">useLink <a class="header-anchor" href="#useLink" aria-label="Permalink to &quot;useLink&quot;">​</a></h3><p>▸ <strong>useLink</strong>&lt;<code>Name</code>&gt;(<code>props</code>): <a href="./interfaces/UseLinkReturn.html"><code>UseLinkReturn</code></a>&lt;<code>Name</code>&gt;</p><p>Returns the internal behavior of a <a href="./#RouterLink">RouterLink</a> without the rendering part.</p><h4 id="Type-parameters-24" tabindex="-1">Type parameters <a class="header-anchor" href="#Type-parameters-24" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Name</code></td><td style="text-align:left;">extends <code>string</code> | <code>symbol</code> = <code>string</code> | <code>symbol</code></td></tr></tbody></table><h4 id="Parameters-13" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-13" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>props</code></td><td style="text-align:left;"><a href="./interfaces/UseLinkOptions.html"><code>UseLinkOptions</code></a>&lt;<code>Name</code>&gt;</td><td style="text-align:left;">a <code>to</code> location and an optional <code>replace</code> flag</td></tr></tbody></table><h4 id="Returns-14" tabindex="-1">Returns <a class="header-anchor" href="#Returns-14" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./interfaces/UseLinkReturn.html"><code>UseLinkReturn</code></a>&lt;<code>Name</code>&gt;</p><hr><h3 id="useRoute" tabindex="-1">useRoute <a class="header-anchor" href="#useRoute" aria-label="Permalink to &quot;useRoute&quot;">​</a></h3><p>▸ <strong>useRoute</strong>&lt;<code>Name</code>&gt;(<code>_name?</code>): <a href="./#RouteLocationNormalizedLoaded"><code>RouteLocationNormalizedLoaded</code></a>&lt;<code>Name</code>&gt;</p><p>Returns the current route location. Equivalent to using <code>$route</code> inside templates.</p><h4 id="Type-parameters-25" tabindex="-1">Type parameters <a class="header-anchor" href="#Type-parameters-25" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Name</code></td><td style="text-align:left;">extends <code>string</code> | <code>symbol</code> = <code>string</code> | <code>symbol</code></td></tr></tbody></table><h4 id="Parameters-14" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters-14" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>_name?</code></td><td style="text-align:left;"><code>Name</code></td></tr></tbody></table><h4 id="Returns-15" tabindex="-1">Returns <a class="header-anchor" href="#Returns-15" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./#RouteLocationNormalizedLoaded"><code>RouteLocationNormalizedLoaded</code></a>&lt;<code>Name</code>&gt;</p><hr><h3 id="useRouter" tabindex="-1">useRouter <a class="header-anchor" href="#useRouter" aria-label="Permalink to &quot;useRouter&quot;">​</a></h3><p>▸ <strong>useRouter</strong>(): <a href="./interfaces/Router.html"><code>Router</code></a></p><p>Returns the router instance. Equivalent to using <code>$router</code> inside templates.</p><h4 id="Returns-16" tabindex="-1">Returns <a class="header-anchor" href="#Returns-16" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./interfaces/Router.html"><code>Router</code></a></p>`,399),d=[i];function n(s,l,c,h,p,u){return a(),t("div",null,d)}const f=e(r,[["render",n]]);export{y as __pageData,f as default};
