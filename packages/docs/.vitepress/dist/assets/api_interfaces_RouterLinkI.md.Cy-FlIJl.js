import{_ as e,c as t,o,a3 as a}from"./chunks/framework.BBx4Jw7q.js";const f=JSON.parse('{"title":"Interface: _RouterLinkI","description":"","frontmatter":{"editLink":false},"headers":[],"relativePath":"api/interfaces/RouterLinkI.md","filePath":"api/interfaces/RouterLinkI.md"}'),d={name:"api/interfaces/RouterLinkI.md"},c=a('<p><a href="./../">API Documentation</a> / _RouterLinkI</p><h1 id="Interface-RouterLinkI" tabindex="-1">Interface: _RouterLinkI <a class="header-anchor" href="#Interface-RouterLinkI" aria-label="Permalink to &quot;Interface: \\_RouterLinkI&quot;">​</a></h1><p>Typed version of the <code>RouterLink</code> component. Its generic defaults to the typed router, so it can be inferred automatically for JSX.</p><h2 id="Constructors" tabindex="-1">Constructors <a class="header-anchor" href="#Constructors" aria-label="Permalink to &quot;Constructors&quot;">​</a></h2><h3 id="constructor" tabindex="-1">constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;constructor&quot;">​</a></h3><p>• <strong>new _RouterLinkI</strong>(): <code>Object</code></p><h4 id="Returns" tabindex="-1">Returns <a class="header-anchor" href="#Returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><code>Object</code></p><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>$props</code></td><td style="text-align:left;"><code>AllowedComponentProps</code> &amp; <code>ComponentCustomProps</code> &amp; <code>VNodeProps</code> &amp; <a href="./RouterLinkProps.html"><code>RouterLinkProps</code></a></td></tr><tr><td style="text-align:left;"><code>$slots</code></td><td style="text-align:left;">{ <code>default?</code>: (<code>__namedParameters</code>: { <code>href</code>: <code>string</code> ; <code>isActive</code>: <code>boolean</code> ; <code>isExactActive</code>: <code>boolean</code> ; <code>route</code>: <a href="./RouteLocationResolvedGeneric.html"><code>RouteLocationResolvedGeneric</code></a> ; <code>navigate</code>: (<code>e?</code>: <code>MouseEvent</code>) =&gt; <code>Promise</code>&lt;<code>void</code> | <a href="./NavigationFailure.html"><code>NavigationFailure</code></a>&gt; }) =&gt; <code>VNode</code>&lt;<code>RendererNode</code>, <code>RendererElement</code>, { <code>[key: string]</code>: <code>any</code>; }&gt;[] }</td></tr><tr><td style="text-align:left;"><code>$slots.default?</code></td><td style="text-align:left;">(<code>__namedParameters</code>: { <code>href</code>: <code>string</code> ; <code>isActive</code>: <code>boolean</code> ; <code>isExactActive</code>: <code>boolean</code> ; <code>route</code>: <a href="./RouteLocationResolvedGeneric.html"><code>RouteLocationResolvedGeneric</code></a> ; <code>navigate</code>: (<code>e?</code>: <code>MouseEvent</code>) =&gt; <code>Promise</code>&lt;<code>void</code> | <a href="./NavigationFailure.html"><code>NavigationFailure</code></a>&gt; }) =&gt; <code>VNode</code>&lt;<code>RendererNode</code>, <code>RendererElement</code>, { <code>[key: string]</code>: <code>any</code>; }&gt;[]</td></tr></tbody></table><h2 id="Properties" tabindex="-1">Properties <a class="header-anchor" href="#Properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><h3 id="useLink" tabindex="-1">useLink <a class="header-anchor" href="#useLink" aria-label="Permalink to &quot;useLink&quot;">​</a></h3><p>• <strong>useLink</strong>: &lt;Name&gt;(<code>props</code>: <a href="./UseLinkOptions.html"><code>UseLinkOptions</code></a>&lt;<code>Name</code>&gt;) =&gt; <a href="./UseLinkReturn.html"><code>UseLinkReturn</code></a>&lt;<code>Name</code>&gt;</p><p>Access to <code>useLink()</code> without depending on using vue-router</p><h4 id="Type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#Type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h4><p>▸ &lt;<code>Name</code>&gt;(<code>props</code>): <a href="./UseLinkReturn.html"><code>UseLinkReturn</code></a>&lt;<code>Name</code>&gt;</p><p>Access to <code>useLink()</code> without depending on using vue-router</p><h5 id="Type-parameters" tabindex="-1">Type parameters <a class="header-anchor" href="#Type-parameters" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h5><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Name</code></td><td style="text-align:left;">extends <code>string</code> | <code>symbol</code> = <code>string</code> | <code>symbol</code></td></tr></tbody></table><h5 id="Parameters" tabindex="-1">Parameters <a class="header-anchor" href="#Parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>props</code></td><td style="text-align:left;"><a href="./UseLinkOptions.html"><code>UseLinkOptions</code></a>&lt;<code>Name</code>&gt;</td></tr></tbody></table><h5 id="Returns-1" tabindex="-1">Returns <a class="header-anchor" href="#Returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><a href="./UseLinkReturn.html"><code>UseLinkReturn</code></a>&lt;<code>Name</code>&gt;</p>',22),r=[c];function n(i,s,l,h,u,p){return o(),t("div",null,r)}const g=e(d,[["render",n]]);export{f as __pageData,g as default};
